;;; Compiled snippets and support files for `org-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'org-mode
                     '(("<video" "#+begin_export html\n<video style=\"center\" width=\"${2:700}\" ${3:autoplay }${4:controls}${5: loop}>\n <source src=`(let* ((s (read-file-name \"Video file: \"))\n                     (s-short (substring s (string-match \"/img\" s))))\n                (concat \"\\\"\"\n                        s-short\n                        \"\\\" type=\\\"\"\n                        (substring (shell-command-to-string\n                          (concat \"mimetype -b 2>/dev/null \"\n                                  (shell-quote-argument s))) 0 -1)\n                        \"\\\">\\n<a href=\"\n                        s-short\n                        \"\\\">\"\n                        ))`${6:[VIDEO]}</a></video>\n#+end_export\n$0" "video template" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/video template" nil nil)
                       ("template-org" "#+title: $1\n#+LANGUAGE: he\n#+LATEX_COMPILER: xelatex\n#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"/Users/ido/.config/org/basic-hebrew-style.css\" />\n#+HTML_HEAD_EXTRA: <link rel=\"alternate stylesheet\" type=\"/Users/ido/.config/org/basic-hebrew-style.css\" href=\"\" />\n#+LATEX_HEADER: \\input{~/.config/latex/hebrew-latex.tex}\n#+STARTUP: latexpreview\n$0" "template-org" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/template-org" nil nil)
                       ("<jp" "#+BEGIN_SRC jupyter-python\n$0\n#+END_SRC" "src-jupyter-python" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/src-jupyter-python" nil nil)
                       ("<src" "#+begin_src ${1:$$(yas-auto-next (yas-completing-read \"Language: \" (mapcar 'car org-babel-load-languages))) }\n$0\n#+end_src" "source block" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/source block" nil nil)
                       ("<spa" "#+REVEAL_HTML: <span class=\"${1:fragment}\" style=\"${2:font-size:50%}\">\n$0\n#+REVEAL_HTML: </span>" "reveal-html-span" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/reveal-html-span" nil nil)
                       ("<div" "#+REVEAL_HTML: <div class=\"${1:row}\" style=\"$2\">\n$0\n#+REVEAL_HTML: </div>" "reveal-html-div" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/reveal-html-div" nil nil)
                       ("<rco" "#+REVEAL_HTML: <div class=\"column\" style=\"width:${1:50}%;\">\n$0\n#+REVEAL_HTML: </div>\n#+REVEAL_HTML: <div class=\"column\" style=\"width:${1:$(- 100 (string-to-number yas-text))}%;\">\n\n#+REVEAL_HTML: </div>" "reveal-html-columns" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/reveal-html-columns" nil nil)
                       ("<pre" "#+DESCRIPTION:\n#+AUTHOR: Aspect\n#+EXPORT_FILE_NAME: ~/nc/Org/html/school/cyranocharacters.html\n#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup\n#+OPTIONS: num:nil" "" t nil nil "/Users/ido/.config/doom/snippets/org-mode/preamble" nil "")
                       ("srct" "#+begin_src $1 :tangle yes\n$0\n#+end_src" "org-src-tangle" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/org-src-tangle" nil nil)
                       ("sht" "#+begin_src sh :tangle yes\n$0\n#+end_src" "org-src-shell-tangle" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/org-src-shell-tangle" nil nil)
                       ("shte" "#+begin_src sh :tangle (if (member \"enable\" (org-get-tags (point))) \"yes\" \"no\")\n$0\n#+end_src" "org-shell-toggle-enable" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/org-shell-toggle-enable" nil nil)
                       ("shtd" "#+begin_src sh :tangle (if (member \"disable\" (org-get-tags (point))) \"yes\" \"no\")\n$0\n#+end_src\n" "org-shell-toggle-disable" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/org-shell-toggle-disable" nil nil)
                       ("orgheaders" "#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"../org-html/style.css\" />\n#+HTML_HEAD_EXTRA: <link rel=\"alternate stylesheet\" type=\"text/css\" href=\"../org-html/style.css\" />\n#+LATEX_COMPILER: xelatex\n#+LATEX_HEADER: \\input{~/.config/latex/hebrew-latex.tex}\n#+STARTUP: latexpreview" "hebrew-org-headers" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/hebrew-org-headers" nil nil)
                       ("3=" "#+$0" "hash-plus" 'auto nil nil "/Users/ido/.config/doom/snippets/org-mode/hash-plus" nil nil)
                       ("lisp" "#+begin_src emacs-lisp\n$0\n#+end_src" "emacs-lisp src" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/emacs-lisp src" nil nil)
                       ("<export-css" "#+begin_quote\n#+HTML_HEAD: <link rel=\"sylesheet\" type=\"text/css\" href=\"~/nc/Org/readtheorg.css\">\n#+end_quote" "css" t nil nil "/Users/ido/.config/doom/snippets/org-mode/css" nil "")
                       ("<header" "#+TITLE: ${1:$$(capitalize yas-text)}\n#+AUTHOR: ${2:`user-full-name`}\n#+DATE: ${3:`(format-time-string \"%Y:%m:%d\")`}\n#+OPTIONS: h:${4:3} num:${5:t||nil} toc:${6:t||nil}\n${7:#+PROPERTY: header-args:matlab :session *MATLAB* :results output :exports both :eval never-export :noweb yes}\n${8:#+PROPERTY: header-args:julia :session *Julia* :async yes :exports results :using Plots LinearAlgebra Printf DifferentialEquations :eval never-export}\n# #+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup\n# #+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"https://gongzhitaao.org/orgcss/org.css\"/>\n#+LATEX_CLASS: ${9:article}\n#+LATEX_CLASS_OPTIONS: ${10:[10pt]}\n#+LATEX_HEADER: ${11:\\input{${12:`(if (boundp 'my-preamble-file) my-preamble-file \"\")`}}}\n${13:#+BIBLIOGRAPHY: ${14:`(replace-regexp-in-string \"\\\\.bib$\" \"\" (car reftex-default-bibliography))`} plain}\n#+EXCLUDE_TAGS: noexport ignore\n#+STARTUP: ${15:latexpreview} ${16:hideblocks}\n\n$0\n" "Basic Org Header" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/basic org header" nil nil)
                       ("<anki" "`(make-string (1+ (or (org-current-level) 0)) 42)` $1 :@anki:\n:PROPERTIES:\n:ANKI_NOTE_TYPE: `(completing-read \"Card type: \" '(\"Basic\" \"Cloze\") nil t)`\n:ANKI_DECK: Default\n:ANKI_TAGS: `(if-let ((all-tags (or (and (require 'anki-editor nil t)\n                                         (with-demoted-errors \"Using local tags: %S\"\n                                          (anki-editor-all-tags)))\n                                     (and (boundp 'my-anki-tags) my-anki-tags))))\n                    (mapconcat #'identity (completing-read-multiple \"Tags: \" all-tags) \" \") \"\")`\n:ID: `(org-id-get-create)`\n:END:\n`(make-string (+ 2 (or (org-current-level) 0)) 42)` Front\n${1:Question}\n`(make-string (+ 2 (or (org-current-level) 0)) 42)` Back\n$0" "anki" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/anki" nil nil)
                       ("מושג" "** ${1:מושג}\n:PROPERTIES:\n:ANKI_DECK: ביולוגיה 1\n:ANKI_NOTE_TYPE: Biology/Term\n:END:\n*** מושג\n$1\n*** הסבר\n$0`(org-hide-drawer-all)`" "Anki Biology Term" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/Anki Biology Term" nil nil)
                       ("שאלה" "** ${1:שאלה}\n:PROPERTIES:\n:ANKI_DECK: ביולוגיה 1\n:ANKI_NOTE_TYPE: Biology/Question\n:END:\n*** שאלה\n$1\n*** תשובה\n$0`(org-hide-drawer-all)`" "Anki Biology Question" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/Anki Biology Question" nil nil)
                       ("ביולוגיה-חדש" "* תוכן עניינים :toc:\n\n* שאלות\n$0\n* הגדרות\n\n* מושגים\n\n* ניסויים\n\n* רשימות" "Anki Biology New Subject" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/Anki Biology New Subject" nil nil)
                       ("רשימה" "** ${1:נושא}\n:PROPERTIES:\n:ANKI_DECK: ביולוגיה 1\n:ANKI_NOTE_TYPE: Biology/List\n:END:\n*** נושא\n$1\n*** תשובה\n$0`(org-hide-drawer-all)`" "Anki Biology List" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/Anki Biology List" nil nil)
                       ("ניסוי" "** ${1:ניסוי}\n:PROPERTIES:\n:ANKI_DECK: ביולוגיה 1\n:ANKI_NOTE_TYPE: Biology/Experiment\n:END:\n*** שם הניסוי\n$1\n*** הסבר\n$0\n*** פירוט\n\n*** מסקנות\n`(org-hide-drawer-all)`" "Anki Biology Experiment" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/Anki Biology Experiment" nil nil)
                       ("הגדרה" "** ${1:הגדרה}\n:PROPERTIES:\n:ANKI_DECK: ביולוגיה 1\n:ANKI_NOTE_TYPE: Biology/Definition\n:END:\n*** מושג\n$1\n*** הסבר\n$0`(org-hide-drawer-all)`" "Anki Biology Definition" nil nil nil "/Users/ido/.config/doom/snippets/org-mode/Anki Biology Definition" nil nil)))


;;; Do not edit! File generated at Tue Oct 10 17:16:25 2023
